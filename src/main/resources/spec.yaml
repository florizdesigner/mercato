openapi: 3.0.3
info:
  title: Mercato (e-commerce API)
  version: 0.0.1
  description: API for managing an online store
  contact:
    email: dev@gastrolink.ru

servers:
  - url: https://api.example.com/api
    description: Production server
  - url: http://localhost:8080/api
    description: Local development

# Глобальные настройки безопасности
security:
  - bearerAuth: []

# Основные эндпоинты
paths:
  /brand/{id}:
    post:
      tags: [Brands]
      summary: Get brand by ID
      description: Returns brand info by it id, but if brand isn't found - empty list
      parameters:
        - $ref: '#/components/parameters/brandId'
      responses:
        200:
          description: Success request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandPage'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
  /brand/get-all:
    post:
      tags: [Brands]
      summary: Get all brands
      description: Returns list of brands with pagination
      parameters:
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/size'
        - $ref: '#/components/parameters/sort'
      responses:
        200:
          description: Success request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrandPage'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalServerError'
  /brand/create:
    post:
      tags: [Brands]
      summary: Create a new brand
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBrandRequest'
      responses:
        201:
          description: Brand is created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateBrandResponse'

components:
  schemas:
    Brand:
      type: object
      required: [name]
      properties:
        id:
          type: integer
          format: int64
          example: 123
          readOnly: true
        name:
          type: string
          minLength: 3
          maxLength: 128
          example: "Xiaomi"
        description:
          type: string
          nullable: true
          example: "Компания Xiaomi производит ..."
        url:
          type: string
          nullable: true
          example: "https://mi.com"

    CreateBrandRequest:
       type: object
       allOf:
         - $ref: '#/components/schemas/Brand'
       properties:
         id:
           nullable: false
           readOnly: true
         name:
           $ref: '#/components/schemas/Brand/properties/name'
         description:
           $ref: '#/components/schemas/Brand/properties/description'
         url:
           $ref: '#/components/schemas/Brand/properties/url'
       required:
         - name

    CreateBrandResponse:
      allOf:
        - $ref: '#/components/schemas/Brand'
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
          readOnly: true

    BrandPage:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Brand'
        totalElements:
          type: integer
          example: 42
        totalPages:
          type: integer
          example: 3

    ErrorResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
        error:
          type: string
        message:
          type: string

  parameters:
    page:
      name: page
      in: query
      description: Номер страницы (0-based)
      required: false
      schema:
        type: integer
        default: 0
    size:
      name: size
      in: query
      description: Количество элементов на странице
      required: false
      schema:
        type: integer
        default: 20
    sort:
      name: sort
      in: query
      description: "Поле сортировки (формат: field,asc|desc)"
      required: false
      schema:
        type: string
        example: "price,desc"
    brandId:
      name: id
      in: path
      required: true
      description: ID товара
      schema:
        type: integer
        format: int64

  responses:
    BadRequest:
      description: Неверные параметры запроса
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'